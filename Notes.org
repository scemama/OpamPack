#+TITLE: OpamPack
#+PROPERTY: header-args :tangle OpamPack.sh :comments org

* Initialization

  #+begin_src bash :shebang "#!/bin/bash"
rm -rf _build
mkdir -p _build/opampack
cd _build/opampack
  #+end_src

  Get the list of packages from the command-line
  #+begin_src bash
OPAM_PACK=$0
USER_PACKAGES=$@
if [[ -z $USER_PACKAGES ]] ; then
    echo "Error: $OPAM_PACK [PACKAGE] ..."
    exit -1
fi

set -e # In what follows, fail when an error is encountered
  #+end_src

  Find the extended list of packages
  
* Download OPAM

  Download the OPAM installer
  #+begin_src bash
wget https://raw.githubusercontent.com/ocaml/opam/master/shell/install.sh
  #+end_src

  Download the binary of the latest version of OPAM
  #+begin_src bash
sh install.sh --download-only
mv opam-* opam
chmod +x opam
rm install.sh
  #+end_src
  
* Create a custom repository with the minimal amount of packages

  Clone the original repository locally
  #+begin_src bash
git clone https://github.com/ocaml/opam-repository.git --depth=1
  #+end_src

  Create an empty directory that will contain the opam files
  #+begin_src bash
mkdir opamroot
  #+end_src

  Set it as the default OPAM root directory
  #+begin_src bash
export OPAMROOT=$PWD/opamroot
  #+end_src

  Initialize it as an Opam repository, without creating a switch to
  prevent the installation of an OCaml compiler.
  #+begin_src bash
echo n \
    | ./opam init \
             --bare \
             --disable-sandboxing \
             --disable-shell-hook \
             --root=$PWD/opamroot \
             $PWD/opam-repository
eval $(./opam env)
  #+end_src

  Create an empty switch named =opampack=
  #+begin_src bash
./opam switch create --empty opampack
eval $(./opam env --switch=opampack)
  #+end_src

  Find the complete list of necessary packages
  #+begin_src bash
PACKAGES=$(echo n \
               | ./opam install --dry-run $USER_PACKAGES \
               | awk '/install/ { print $3 }' \
        )
  #+end_src
  
  In the repository, keep only the required packages:
  #+begin_src bash
cd opam-repository
mv packages packages_old
mkdir packages
for p in $PACKAGES ; do
  mv packages_old/$p packages
done
  #+end_src

  Remove unnecessary packages and git files
  #+begin_src bash
rm -rf packages_old
rm -rf .git
cd ..
  #+end_src

* Create the dummy directory

  Re-create an empty directory that will contain the opam files
  #+begin_src bash
rm -rf opamroot
mkdir opamroot
  #+end_src

  Set it as the default OPAM root directory
  #+begin_src bash
export OPAMROOT=$PWD/opamroot
  #+end_src

  Initialize it as an Opam repository, without creating a switch to
  prevent the installation of an OCaml compiler.
  #+begin_src bash
echo n \
    | ./opam init \
             --bare \
             --disable-sandboxing \
             --disable-shell-hook \
             --root=$PWD/opamroot \
             $PWD/opam-repository
eval $(./opam env)
  #+end_src

  Create an empty switch named =opampack=
  #+begin_src bash
./opam switch create --empty opampack
eval $(./opam env --switch=opampack)
  #+end_src

  Download all the required packages for the installation
  #+begin_src bash
./opam install -y --download-only $USER_PACKAGES
  #+end_src

  Create a script to extract the =tar.gz= file and to install the packages.
  #+begin_src bash
INSTALL_SCRIPT=install.sh

cat << EOF > $INSTALL_SCRIPT
#!/bin/bash
export OPAMROOT=\$PWD/opamroot
eval \$(./opam env --root=\$PWD/opamroot)
./opam install -y --assume-depexts $USER_PACKAGES
EOF
chmod +x $INSTALL_SCRIPT
  #+end_src

  Make a =tar.gz= of all the needed files for exporting OPAM
  #+begin_src bash
cd ..  # back in _build
tar -zcvf opampack.tar.gz opampack
rm -rf opampack
  #+end_src


* On the new host

  Move the =opampack.tar.gz= to the new machine.
  #+begin_src bash :tangle no
tar -zxvf opampack.tar.gz
cd opampack
./install.sh
  #+end_src

  On the new host, before using OCaml make sure that the =opam=
  executable is in your ~PATH~, and that you have set the ~OPAMROOT~
  environment variable to the ~opamroot~ directory that has been extracted.

  #+begin_src bash :tangle no
export OPAMROOT=/path/to/opampack/opamroot
eval $(/path/to/opampack/opam env --root=$OPAMROOT)
  #+end_src

